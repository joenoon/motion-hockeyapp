= motion-hockeyapp

motion-hockeyapp allows RubyMotion projects to easily embed the HockeySDK
and be submitted to the HockeyApp platform.

== Installation

  gem 'motion-hockeyapp'

  unzip the HockeySDK into vendor so you end up with exactly the following directory structure:
  
  vendor/HockeySDK/HockeySDK.framework
  vendor/HockeySDK/Resources


== Setup

    Motion::Project::App.setup do |app|
      # ...
      # app.development do
      #   app.identifier = 'com.your.App.dev'
      # end
      # ...
      if app.hockeyapp?
        app.hockeyapp do
          set :api_token, '2fc2d1b97ef24ec38a70a721c65956e2'
          set :beta_id, '83be1abdfb3acd29c0e012a644e71b7d'
          set :live_id, '90a35939241bd75d785e152d37aeb25b'
          set :status, "2"
          set :notify, "0"
          set :notes_type, "1"
        end
        # optional: do other config changes when in hockeyapp mode
        # app.identifier = 'com.your.App.hockeyapp'
      end
      # ...
    end

   You can retrieve the values in your HockeyApp account page.
   Refer to http://support.hockeyapp.net/kb/api/api-upload-new-apps for Upload API options.

   in app_delegate.rb :

      def application(application, didFinishLaunchingWithOptions:launchOptions)
        # ...
        BITHockeyManagerLauncher.new.start
        # ...
      end

      or, more advanced...
    
      def application(application, didFinishLaunchingWithOptions:launchOptions)
        # ...
        if BITHockeyManagerLauncher.new.start { # execute this code before 'BITHockeyManager.sharedHockeyManager.startManager' is called }
          if BITHockeyManager.sharedHockeyManager.crashManager.didCrashInLastSession
            # maybe you need to do some cleanup after a crash
          end
        end
        # ...
      end

  if you want to implement the BITCrashManagerDelegate, create a file opening the BITHockeyManagerLauncher
  class and add your delegate methods.  for example:

      class BITHockeyManagerLauncher

        def applicationLogForCrashManager(crashManager)
          # ...
        end

        def shouldUseLiveIdentifierForHockeyManager(hockeyManager)
          # ...
        end

        def userIDForHockeyManager(hockeyManager, componentManager:componentManager)
          # ...
        end

        def userNameForHockeyManager(hockeyManager, componentManager:componentManager)
          # ...
        end

        def userEmailForHockeyManager(hockeyManager, componentManager:componentManager)
          # ...
        end

      end


== Usage

motion-hockeyapp introduces a +hockeyapp+ Rake task to your project, which can be used to submit a development build. The +notes+ parameter may be provided, and its content will be used as the submission release notes.

  $ notes="release notes here" rake hockeyapp

or build in hockeyapp mode and try to deploy it to your device, but skip uploading it to hockeyapp:

  $ rake hockeyapp:build

== License

  Copyright (c) 2012, Joe Noon <joenoon@gmail.com>
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met: 
  
  1. Redistributions of source code must retain the above copyright notice, this
     list of conditions and the following disclaimer. 
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution. 
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
